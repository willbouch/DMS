namespace dms.model;

use DMS_Persistence.ump;

class DMS {
	1 -<@> * User;
	1 -<@> * UserRole;
	1 -<@> * Order;
	1 -<@> * Receipt;
	1 -<@> * Inventory;
	
	public Inventory findInventory(char firstLetter) {
		for(Inventory inv : this.getInventories()) {
			if(firstLetter == inv.getFirstLetter()) {
				return inv;
			}
		}
		
		return null;
	}
}

class User {
	unique String username;
	
	1 -> 1 UserRole;
	
	before constructor {
   		if(aUsername == null || aUsername.equals("")) {
     		throw new RuntimeException("Le nom d'utilisateur ne peut être vide.");
   		}
   	}
   	
   	before constructor, setUsername {
   		if(aUsername.length() < 8) {
     		throw new RuntimeException("Le nom d'utilisateur doit comprendre au moins 8 charactères.");
   		}
   	}
   		
}

class UserRole{
	abstract;
	String password;
	
	before constructor, setPassword {
   		if(aPassword.length() < 8) {
     		throw new RuntimeException("Le mot de passe doit comprendre au moins 8 charactères.");
   		}
   	}
}

class Cashier {
	isA UserRole;
}	

class Pharmacist {
	isA UserRole;
}

class Administrator {
	isA UserRole;
}

class Order {
	Date date;
	
	* -> 1 Pharmacist;
	* -> 1 Administrator;
	1 -> * Drug;
}

class Drug {
	String name;
	Double price;
	Double concentration;
	String unit;
	Integer inHandQuantity;
	defaulted Integer orderedQuantity = 0;
	Integer minQuantity;
	unique String code;
	
	before constructor {
		
		for(Drug drug : aInventory.getDrugs()) {
			if(drug.getName().equals(aName) && drug.getConcentration() == aConcentration) {
				throw new RuntimeException("Le médicament existe déjà.");
			}
		}
	}
	
	before constructor , setPrice {
		if(aPrice < 0) {
			throw new RuntimeException("Le prix ne peut être négatif.");
		}
	}
	
	before constructor, setInHandQuantity {
		if(aInHandQuantity < 0) {
			throw new RuntimeException("La quantité en main ne peut être négative.");
		}
	}
	
	before setOrderedQuantity {
		if(aOrderedQuantity < 0) {
			throw new RuntimeException("La quantité commandée ne peut être négative.");
		}
	}
	
	before constructor, setMinQuantity {
		if(aMinQuantity < 0) {
			throw new RuntimeException("La quantité minimale ne peut être négative.");
		}
	}
	
	before constructor, setConcentration {
		if(aConcentration < 0) {
			throw new RuntimeException("La concentration ne peut être négative.");
		}
	}
}

class Inventory {
	immutable char firstLetter;
	
	1 <@>- * Drug;
	
	before constructor {
		if(aFirstLetter < 'A' || aFirstLetter > 'Z') {
			throw new RuntimeException("La première lettre de l'inventaire doit être entre A et Z.");			
		}	
	}
	
	public Drug findDrug(String code) {
		List<Drug> drugs = this.getDrugs();
		for(Drug drug : drugs) {
			if(drug.getCode().equals(code)) {
				return drug;
			}
		}
		
		return null;
	}
}

class Receipt {
	Double totalPrice;
	
	1 -> * Drug;
	
	public boolean addDrugAllowDuplicates(Drug aDrug)
  {
    boolean wasAdded = false;
    drugs.add(aDrug);
    wasAdded = true;
    return wasAdded;
  }
}