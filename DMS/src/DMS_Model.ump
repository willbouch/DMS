namespace dms.model;

use DMS_Persistence.ump;

class DMS {
	1 -<@> * User;
	1 -<@> * UserRole;
	1 -<@> * Order;
	1 -<@> * Receipt;
	1 -<@> * Inventory;
	
	public Inventory findInventory(String name) {
		char firstLetter = name.charAt(0);
		for(Inventory inv : this.getInventories()) {
			if(firstLetter == inv.getFirstLetter()) {
				return inv;
			}
		}
		
		return null;
	}
}

class User {
	unique String username;
	
	1 -> 1 UserRole;
	
	before constructor {
   		if(aUsername == null || aUsername.equals(""))
     		throw new RuntimeException("Le nom d'utilisateur ne peut être vide.");
   		}
}

class UserRole{
	abstract;
	String password;
	
	before constructor {
   		if(aPassword == null || aPassword.equals(""))
     		throw new RuntimeException("Le mot de passe ne peut être vide.");
   		}
}

class Cashier {
	isA UserRole;
}	

class Pharmacist {
	isA UserRole;
}

class Administrator {
	isA UserRole;
}

class Order {
	Date date;
	
	* -> 1 Pharmacist;
	* -> 1 Administrator;
	1 -> * Drug;
}

class Drug {
	String name;
	Double price;
	Double concentration;
	String unit;
	Integer inHandQuantity;
	defaulted Integer orderedQuantity = 0;
	Integer minQuantity;
	autounique id;

	* sorted {name} -<@> 1 Inventory;
	
	before constructor {
		
		for(Drug drug : aInventory.getDrugs()) {
			if(drug.getName().equals(aName) && drug.getConcentration() == aConcentration) {
				throw new RuntimeException("Le médicament existe déjà");
			}
		}
	}
}

class Inventory {
	char firstLetter;
	
	public Drug findDrug(int id) {
		List<Drug> drugs = this.getDrugs();
		for(Drug drug : drugs) {
			if(drug.getId() == id) {
				return drug;
			}
		}
		
		return null;
	}
}

class Receipt {
	Double totalPrice;
	
	1 -> * Drug;
}